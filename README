# APB Project

---

## Project Overview

- **Parallel bus operation**: All data is captured on the **rising edge** of the clock.
- **Signal Priority**:
  1. **PRESET** (active low)
  2. **PSEL** (active high)
  3. **PENABLE** (active high)
  4. **PREADY** (active high)
  5. **PWRITE**
- **Two Slave Design**:
  - Based on the **9th bit** of `apb_write_paddress`, the master selects **Slave1** or **Slave2**.
- **Data Width**: 8 bits  
- **Address Width**: 9 bits
- **Write/Read Operation**:
  - **PWRITE = 1** â†’ Write `PWDATA` to slave
  - **PWRITE = 0** â†’ Read `PRDATA` from slave

---

## Pin Diagram

Below diagram shows the APB slave with all input and output signals:  
![Pin Diagram](https://github.com/user-attachments/assets/4d81be7d-84a4-4f33-9b74-f98e70479b03)

---

## Verification of APB Slave

### Testbench Components

- **apb_sequence_item**:
  - Extends `uvm_sequence_item`
  - Defines input/output variables (inputs randomized)
  - Uses factory registration and utility macros

- **apb_sequence**:
  - Extends `uvm_sequence`
  - Handles sequence requests and responses
  - Custom subclasses for different test cases

- **apb_sequencer**:
  - Extends `uvm_sequencer`
  - Includes constructor and utility macros

- **apb_driver**:
  - Extends `uvm_driver`
  - Connects to DUT via virtual interface
  - Drives inputs and implements handshake

- **apb_monitor_input**:
  - Captures inputs driven by driver
  - Sends data to scoreboard

- **apb_monitor_output**:
  - Captures DUT outputs
  - Sends outputs to scoreboard and coverage

- **apb_scoreboard**:
  - Extends `uvm_scoreboard`
  - Compares input/output for validation

- **apb_coverage**:
  - Extends `uvm_coverage`
  - Captures coverage metrics

- **apb_active_agent**:
  - Combines sequencer, driver, and input monitor
  - Connects sequencer to driver

- **apb_passive_agent**:
  - Contains output monitor for passive observation

- **apb_environment**:
  - Instantiates all components
  - Connects monitors to scoreboard and coverage

- **apb_test**:
  - Extends `uvm_test`
  - Instantiates environment
  - Verifies component topology and simulation errors

- **apb_top**:
  - Top-level module
  - Includes interface, clock/reset generation, DUT instantiation, and `run_test`

- **apb_interface**:
  - Defines signal directions and timing
  - Uses clocking blocks and modports

---

### Testbench Architecture

![Testbench Architecture](https://github.com/user-attachments/assets/31df5542-50d1-4151-8752-db0ff9d3bf71)

---

## Test Plan and Assertion Plan

ðŸ“„ [View Testplan and Assertion Check](https://mirafra2-my.sharepoint.com/:x:/g/personal/veekshith_mirafra2_onmicrosoft_com/EQ9lHgIEmoJJspysDBPWxYsBIu3jHNXXsLYQ7CRgZTZqTw?e=NKFdfw)

---

## How to Run the Code

### Compile the Testbench
```bash
vlog <testbench_file.v>
